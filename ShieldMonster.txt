There be a separate file describing the design idea behind my ArduinoShieldMonster.
So far, this is the draft. 2017-06-14.

Theory.

There are interesting links on the topic of Arduino Analog buttons.
It is possible to put *more* buttons onto an ADC input than only five present on ElecFreak Arduino LCD Shield (http://www.instructables.com/id/Arduino-LCD-Keypad-Shield-1/).
It is even possible to detect simultaneous keypresses - but that is not in my scope.

(some herecy about menu design, logic of various origin and  natural constraints of an character LCD)

Linx:
- https://meettechniek.info/embedded/arduino-analog.html
- https://biskandar.wordpress.com/2012/10/17/request-counter-with-arduino-uno-ethernet-shi/
- https://forum.arduino.cc/index.php?topic=91256.0

How to Debouce Six Buttons on One Analog Pin With Arduino - Electrical Engineering Stack Exchange
- https://electronics.stackexchange.com/questions/101409/how-to-debouce-six-buttons-on-one-analog-pin-with-arduino

Multiple Buttons on 1 analog pin
- http://forum.arduino.cc/index.php?topic=8558.0

Aim

To see what the limits are.
To be written.

Rework

The most critical operation was soldering off the LCD subassembly. I did it partially mechanically - sawing through the 10 pins and desoldering the rest six pins. Very naturally, the pin headers for the LCD were to be substituted.

(Reset button joined to ladder, dimmer upgradedand relocated from digital pin 10 to 03), while analog input relocated from PIN A0 (14) to A3 (17). Last but not least, DB4 of LCD was relocated away from Pin04 to permit experiments with the onboard SD card.


Result

Layers:

- DFR00009 keypad clone: http://www.hobbytronics.co.uk/arduino-lcd-keypad-shield (pic rigth)
- Iteaduino Screw Shield v 1.0 with 3x headers for DS18b20 and  RTC DS3231
- Wiznet 5100 based Ethernet Shield (Mega compatible is more advisable) (pic int solder)
- Arduino Uno R3


Generic remarks about security


The far-reaching plan is to install MQTT and a relevant client lib to Arduino.
As we know, Arduino is lacking resources to support a proper SSL connection,
thus we  put up locally up an "application firewall" host (with MQTT)
which will take unencrypted http requests from inside and, if needed,
will transmit these to the cloud, but now already properly encrypted.

We have a certain understanding about the on-site security, including but not
limited to the following postulates:

- No WiFi used. WiFi is as much convenient as it is inherently insecure.
To not endanger the rest of the installation (in case you, hmm, have one),
a) physical cabling is to be used, b) a FW assumed, c) an extra segment assumed.

- IoT devices _SHOULD_NEVER_ reside in a generic network segment.
The consequence is, a proper hardware firewall with multiple physical interfaces is needed,
a requirement somewhat not fulfilled an average home or lab. We a sorry, get secure!

- DHCP should be used to obtain IP addresses (disregarding whether a client or server).
That decision makes the infrastructure easily manageable and portable.
In case of Arduinos, the MAC address is defined in software. Thus, not to saturate
the resources, the Administrator must have some counter measures in his bag.
(As an exercise, try to program a MAC crawler that will  exhaust the DHCP server pool.)

This view - all clients get their IP addresses via DHCP even if they are servers -  also
deviates from the average Arduino textbook logic that an Ethernet server is to be launched
on top of a static IP. It should not. However, the current Ethernet library is not supporting
some primitives useful for an inventory (as an excercise, do try to print out your network mask).

- A central syslog server is a mandatory centerpiece of any secure installation.
What is also true, most homes and labs are missing one. Thus, get one, it helps much.
After you get your data right in syslog, it is easy to switch over to a message broker.
Syslog will help you conduct unattended experiments, serving as a substitution


to somewhat limited SD card domain (8+3 FAT and one open file only).
